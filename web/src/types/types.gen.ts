/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/healthcheck": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description This endpoint is used to check the health of the server.
         *
         */
        get: operations["HealthcheckHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current user
         * @description This endpoint is used to get the current user.
         *
         */
        get: operations["GetCurrentUserHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new user
         * @description This endpoint is used to create a new user.
         *
         */
        post: operations["CreateUserHandler"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate a user
         * @description This endpoint is used to authenticate a user.
         *
         */
        post: operations["CreateAuthenticationTokenHandler"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Logout the current user
         * @description This endpoint is used to logout the current user.
         *
         */
        get: operations["InvalidateAuthenticationTokenHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/movies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for movies
         * @description This endpoint is used to search for movies in the TMDb database.
         *
         */
        get: operations["SearchMoviesHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/tv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for TV shows
         * @description This endpoint is used to search for TV shows in the TMDb database.
         *
         */
        get: operations["SearchTvHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/people": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for people
         * @description This endpoint is used to search for people in the TMDb database.
         *
         */
        get: operations["SearchPeopleHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/movies/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movie details
         * @description This endpoint is used to get details about a specific movie from the TMDb database.
         *
         */
        get: operations["GetMovieDetailsHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/tv/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get TV show details
         * @description This endpoint is used to get details about a specific TV show from the TMDb database.
         *
         */
        get: operations["GetTvDetailsHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/tv/${number}/season/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get TV show season details
         * @description This endpoint is used to get details about a specific season of a TV show from the TMDb database.
         *
         */
        get: operations["GetTvSeasonDetailsHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/tv/${number}/season/${number}/episode/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get TV show episode details
         * @description This endpoint is used to get details about a specific episode of a TV show from the TMDb database.
         *
         */
        get: operations["GetTvEpisodeDetailsHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/people/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get person details
         * @description This endpoint is used to get details about a specific person from the TMDb database.
         *
         */
        get: operations["GetPersonDetailsHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/cast/movies/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movie cast
         * @description This endpoint is used to get the cast of a specific movie from the TMDb database.
         *
         */
        get: operations["GetCastMoviesHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/cast/tv/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get TV show cast
         * @description This endpoint is used to get the cast of a specific TV show from the TMDb database.
         *
         */
        get: operations["GetCastTvHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/watchproviders/movies/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movie watch providers
         * @description This endpoint is used to get the watch providers of a specific movie from the TMDb database.
         *
         */
        get: operations["GetMovieWatchProvidersHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/watchproviders/tv/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get TV show watch providers
         * @description This endpoint is used to get the watch providers of a specific TV show from the TMDb database.
         *
         */
        get: operations["GetTvWatchProvidersHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/watchlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the watchlist
         * @description This endpoint is used to get the watchlist of the current user.
         *
         */
        get: operations["GetWatchlistHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/watchlist/movies/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if a movie is in the watchlist
         * @description This endpoint is used to check if a movie is in the watchlist of the current user.
         *
         */
        get: operations["CheckMovieInWatchlistHandler"];
        put?: never;
        /**
         * Add a movie to the watchlist
         * @description This endpoint is used to add a movie to the watchlist of the current user.
         *
         */
        post: operations["AddMovieToWatchlistHandler"];
        /**
         * Remove a movie from the watchlist
         * @description This endpoint is used to remove a movie from the watchlist of the current user.
         *
         */
        delete: operations["RemoveMovieFromWatchlistHandler"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/watchlist/tv/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if a TV show is in the watchlist
         * @description This endpoint is used to check if a TV show is in the watchlist of the current user.
         *
         */
        get: operations["CheckTvInWatchlistHandler"];
        put?: never;
        /**
         * Add a TV show to the watchlist
         * @description This endpoint is used to add a TV show to the watchlist of the current user.
         *
         */
        post: operations["AddTvToWatchlistHandler"];
        /**
         * Remove a TV show from the watchlist
         * @description This endpoint is used to remove a TV show from the watchlist of the current user.
         *
         */
        delete: operations["RemoveTvFromWatchlistHandler"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/watched": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the watched list
         * @description This endpoint is used to get the watched list of the current user.
         *
         */
        get: operations["GetWatchedHandler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/watched/movies/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if a movie is in the watched list
         * @description This endpoint is used to check if a movie is in the watched list of the current user.
         *
         */
        get: operations["CheckMovieInWatchedHandler"];
        put?: never;
        /**
         * Add a movie to the watched list
         * @description This endpoint is used to add a movie to the watched list of the current user.
         *
         */
        post: operations["AddMovieToWatchedHandler"];
        /**
         * Remove a movie from the watched list
         * @description This endpoint is used to remove a movie from the watched list of the current user.
         *
         */
        delete: operations["RemoveMovieFromWatchedHandler"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/watched/tv/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if a TV show is in the watched list
         * @description This endpoint is used to check if a TV show is in the watched list of the current user.
         *
         */
        get: operations["CheckTvInWatchedHandler"];
        put?: never;
        /**
         * Add a TV show to the watched list
         * @description This endpoint is used to add a TV show to the watched list of the current user.
         *
         */
        post: operations["AddTvToWatchedHandler"];
        /**
         * Remove a TV show from the watched list
         * @description This endpoint is used to remove a TV show from the watched list of the current user.
         *
         */
        delete: operations["RemoveTvFromWatchedHandler"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/watched/tv/${number}/season/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if a TV show season episodes are in the watched list
         * @description This endpoint is used to check if a TV show season episodes are in the watched list of the current user.
         *
         */
        get: operations["CheckTvSeasonInWatchedHandler"];
        put?: never;
        /**
         * Add a TV show season to the watched list
         * @description This endpoint is used to add a TV show season to the watched list of the current user.
         *
         */
        post: operations["AddTvSeasonToWatchedHandler"];
        /**
         * Remove a TV show season from the watched list
         * @description This endpoint is used to remove a TV show season from the watched list of the current user.
         *
         */
        delete: operations["RemoveTvSeasonFromWatchedHandler"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/watched/tv/${number}/season/${number}/episode/${number}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if a TV show episode is in the watched list
         * @description This endpoint is used to check if a TV show episode is in the watched list of the current user.
         *
         */
        get: operations["CheckTvEpisodeInWatchedHandler"];
        put?: never;
        /**
         * Add a TV show episode to the watched list
         * @description This endpoint is used to add a TV show episode to the watched list of the current user.
         *
         */
        post: operations["AddTvEpisodeToWatchedHandler"];
        /**
         * Remove a TV show episode from the watched list
         * @description This endpoint is used to remove a TV show episode from the watched list of the current user.
         *
         */
        delete: operations["RemoveTvEpisodeFromWatchedHandler"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        HealthCheck: {
            healthcheck?: {
                /** @example available */
                status?: string;
                systemInfo?: {
                    /** @example development */
                    environment?: string;
                    /** @example [
                     *       "http://localhost:3000",
                     *       "http://localhost:3001"
                     *     ] */
                    cors_trusted_origins?: string[];
                    /** @example 1.0.0 */
                    version?: string;
                };
            };
        };
        UserResponse: {
            user?: components["schemas"]["User"];
        };
        User: {
            /**
             * Format: int64
             * @description User id
             * @example 15
             */
            id?: number;
            /**
             * Format: rfc3339
             * @description User creation date
             * @example 2021-10-10T12:00:00Z
             */
            created_at?: string;
            /**
             * @description User supplied name
             * @example John Doe
             */
            name?: string;
            /**
             * @description User supplied email
             * @example john.doe@example.com
             */
            email?: string;
        };
        CreateUser: {
            /** @example John Doe */
            name?: string;
            /** @example john.doe@example.com */
            email?: string;
            /** @example password123 */
            password?: string;
        };
        AuthenticateUser: {
            /** @example john.doe@example.com */
            email?: string;
            /** @example password123 */
            password?: string;
        };
        AuthenticationToken: {
            authentication_token?: {
                /** @example a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0 */
                token?: string;
                /**
                 * Format: rfc3339
                 * @example 2021-10-10T12:00:00Z
                 */
                expiry?: string;
            };
        };
        Logout: {
            /** @example authentication token(s) successfully deleted */
            message?: string;
        };
        SearchMoviesResponse: {
            movies?: components["schemas"]["SearchMovie"][];
        };
        SearchMovie: {
            /**
             * Format: int64
             * @example 278
             */
            id?: number;
            /** @example The Shawshank Redemption */
            title?: string;
            /** @example Framed in the 1940s for the double murder of his wife and her lover, upstanding banker Andy Dufresne begins a new life at the Shawshank prison, where he puts his accounting skills to work for an amoral warden. During his long stretch in prison, Dufresne comes to be admired by the other inmates -- including an older prisoner named Red -- for his integrity and unquenchable sense of hope. */
            overview?: string;
            /** @example https://image.tmdb.org/t/p/w92/9cqNxx0GxF0bflZmeSMuL5tnGzr.jpg */
            poster_url?: string;
            /** @example 1994-09-23 */
            release_date?: string;
            /**
             * Format: float
             * @example 8.3
             */
            vote_average?: number;
            /**
             * Format: float
             * @example 186.654
             */
            popularity?: number;
        };
        SearchTVResponse: {
            tv?: components["schemas"]["SearchTv"][];
        };
        SearchTv: {
            /**
             * Format: int64
             * @example 1399
             */
            id?: number;
            /** @example Game of Thrones */
            title?: string;
            /** @example Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond. */
            overview?: string;
            /** @example https://image.tmdb.org/t/p/w92/1XS1oqL89opfnbLl8WnZY1O1uJx.jpg */
            poster_url?: string;
            /** @example 2011-04-17 */
            release_date?: string;
            /**
             * Format: float
             * @example 8.4
             */
            vote_average?: number;
            /**
             * Format: float
             * @example 749.726
             */
            popularity?: number;
        };
        SearchPeopleResponse: {
            people?: components["schemas"]["SearchPeople"][];
        };
        SearchPeople: {
            /**
             * Format: int64
             * @example 115440
             */
            id?: number;
            /** @example Sydney Sweeney */
            name?: string;
            /** @example https://image.tmdb.org/t/p/w92/qYiaSl0Eb7G3VaxOg8PxExCFwon.jpg */
            profile_url?: string;
            /**
             * Format: float
             * @example 152.351
             */
            popularity?: number;
        };
        MovieDetailsResponse: {
            movie?: components["schemas"]["MovieDetails"];
        };
        MovieDetails: {
            /**
             * Format: int64
             * @example 278
             */
            id?: number;
            /** @example The Shawshank Redemption */
            title?: string;
            /** @example Framed in the 1940s for the double murder of his wife and her lover, upstanding banker Andy Dufresne begins a new life at the Shawshank prison, where he puts his accounting skills to work for an amoral warden. During his long stretch in prison, Dufresne comes to be admired by the other inmates -- including an older prisoner named Red -- for his integrity and unquenchable sense of hope. */
            overview?: string;
            /** @example 1994-09-23 */
            release_date?: string;
            genres?: string[];
            /** @example 142 */
            runtime?: number;
            /** @example https://image.tmdb.org/t/p/w92/9cqNxx0GxF0bflZmeSMuL5tnGzr.jpg */
            poster_url?: string;
            /**
             * Format: float
             * @example 186.654
             */
            popularity?: number;
            /**
             * Format: float
             * @example 8.7
             */
            vote_average?: number;
        };
        CastMoviesResponse: {
            cast?: components["schemas"]["CastMovies"][];
        };
        CastMovies: {
            /**
             * Format: int64
             * @example 6941
             */
            id?: number;
            /** @example Cameron Diaz */
            name?: string;
            /** @example Princess Fiona (voice) */
            character?: string;
            /** @example https://image.tmdb.org/t/p/w92/d4f4cQ9EiYuvNMjT1IB2h06KoRx.jpg */
            profile_url?: string;
            /** @example 2 */
            order?: number;
            /**
             * Format: float
             * @example 57.269
             */
            popularity?: number;
        };
        TvDetailsResponse: {
            tv?: components["schemas"]["TvDetails"];
        };
        TvDetails: {
            /**
             * Format: int64
             * @example 1399
             */
            id?: number;
            /** @example Game of Thrones */
            name?: string;
            /** @example Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond. */
            overview?: string;
            /** @example 2011-04-17 */
            first_air_date?: string;
            /** @example 2019-05-19 */
            last_air_date?: string;
            genres?: string[];
            /** @example 8 */
            number_of_seasons?: number;
            /** @example 73 */
            number_of_episodes?: number;
            seasons?: components["schemas"]["TvSeason"][];
            /** @example https://image.tmdb.org/t/p/w92/1XS1oqL89opfnbLl8WnZY1O1uJx.jpg */
            poster_url?: string;
            /** @example Ended */
            status?: string;
            /**
             * Format: float
             * @example 749.726
             */
            popularity?: number;
            /**
             * Format: float
             * @example 8.4
             */
            vote_average?: number;
        };
        TvSeason: {
            /**
             * Format: int64
             * @example 3624
             */
            id?: number;
            /** @example Season 1 */
            name?: string;
            /** @example 2011-04-17 */
            air_date?: string;
            /** @example 10 */
            episode_count?: number;
            /** @example Winter Is Coming */
            overview?: string;
            /** @example https://image.tmdb.org/t/p/w92/wgfKiqzuMrFIkU1M68DDDY8kGC1.jpg */
            poster_url?: string;
            /**
             * Format: float
             * @example 8.3
             */
            vote_average?: number;
        };
        TvSeasonDetailsResponse: {
            season?: components["schemas"]["TvSeasonDetails"];
        };
        TvSeasonDetails: {
            /**
             * Format: int64
             * @example 3624
             */
            id?: number;
            /** @example Season 1 */
            name?: string;
            /** @example 2011-04-17 */
            air_date?: string;
            /** @example Winter Is Coming */
            overview?: string;
            /** @example https://image.tmdb.org/t/p/w92/wgfKiqzuMrFIkU1M68DDDY8kGC1.jpg */
            poster_url?: string;
            episodes?: components["schemas"]["TvEpisode"][];
            /**
             * Format: float
             * @example 8.3
             */
            vote_average?: number;
        };
        TvEpisode: {
            /**
             * Format: int64
             * @example 63056
             */
            id?: number;
            /** @example Winter Is Coming */
            name?: string;
            /** @example 2011-04-17 */
            air_date?: string;
            /** @example 62 */
            runtime?: number;
            /** @example standard */
            episode_type?: string;
            /** @example Jon Arryn, the Hand of the King, is dead. King Robert Baratheon plans to ask his oldest friend, Eddard Stark, to take Jon's place. Across the sea, Viserys Targaryen plans to wed his sister to a nomadic warlord in exchange for an army. */
            overview?: string;
            /** @example https://image.tmdb.org/t/p/w92/9hGF3WUkBf7cSjMg0cdMDHJkByd.jpg */
            still_url?: string;
            /**
             * Format: float
             * @example 8.046
             */
            vote_average?: number;
        };
        TvEpisodeDetailsResponse: {
            episode?: components["schemas"]["TvEpisodeDetails"];
        };
        TvEpisodeDetails: {
            /**
             * Format: int64
             * @example 63056
             */
            id?: number;
            /** @example Winter Is Coming */
            name?: string;
            /** @example 2011-04-17 */
            air_date?: string;
            /** @example 62 */
            runtime?: number;
            /** @example Jon Arryn, the Hand of the King, is dead. King Robert Baratheon plans to ask his oldest friend, Eddard Stark, to take Jon's place. Across the sea, Viserys Targaryen plans to wed his sister to a nomadic warlord in exchange for an army. */
            overview?: string;
            /** @example https://image.tmdb.org/t/p/w92/9hGF3WUkBf7cSjMg0cdMDHJkByd.jpg */
            still_url?: string;
            /**
             * Format: float
             * @example 8.046
             */
            vote_average?: number;
        };
        CastTvResponse: {
            cast?: components["schemas"]["CastTv"][];
        };
        CastTv: {
            /**
             * Format: int64
             * @example 1223786
             */
            id?: number;
            /** @example Emilia Clarke */
            name?: string;
            roles?: components["schemas"]["Role"][];
            /** @example https://image.tmdb.org/t/p/w92/wb8VfDPGpyqcFltnRcJR1Wj3h4Z.jpg */
            profile_url?: string;
            /** @example 8 */
            order?: number;
            /**
             * Format: float
             * @example 57.269
             */
            popularity?: number;
        };
        Role: {
            /** @example Daenerys Targaryen */
            character?: string;
            /** @example 73 */
            episode_count?: number;
        };
        PersonDetailsResponse: {
            person?: components["schemas"]["PersonDetails"];
        };
        PersonDetails: {
            /**
             * Format: int64
             * @example 115440
             */
            id?: number;
            /** @example Sydney Sweeney */
            name?: string;
            /** @example Sydney Bernice Sweeney (born September 12, 1997) is an American actress. She gained mainstream attention for her role as Emaline Addario in the Netflix series Everything Sucks! (2018). */
            biography?: string;
            /** @example 1997-09-12 */
            birthday?: string;
            /** @example https://image.tmdb.org/t/p/w92/qYiaSl0Eb7G3VaxOg8PxExCFwon.jpg */
            profile_url?: string;
            /**
             * Format: float
             * @example 152.351
             */
            popularity?: number;
        };
        WatchProvidersResponse: {
            watch_providers?: components["schemas"]["WatchProviders"];
        };
        WatchProviders: {
            /**
             * Format: int64
             * @example 278
             */
            id?: number;
            providers?: {
                flatrate?: components["schemas"]["Flatrate"][];
                rent?: components["schemas"]["Rent"][];
                buy?: components["schemas"]["Buy"][];
            };
        };
        Flatrate: {
            /**
             * Format: int64
             * @example 8
             */
            provider_id?: number;
            /** @example Netflix */
            provider_name?: string;
            /** @example https://image.tmdb.org/t/p/w92/9cqNxx0GxF0bflZmeSMuL5tnGzr.jpg */
            logo_url?: string;
            /** @example 1 */
            display_priority?: number;
        };
        Buy: {
            /**
             * Format: int64
             * @example 2
             */
            provider_id?: number;
            /** @example Apple iTunes */
            provider_name?: string;
            /** @example https://image.tmdb.org/t/p/w92/9cqNxx0GxF0bflZmeSMuL5tnGzr.jpg */
            logo_url?: string;
            /** @example 1 */
            display_priority?: number;
        };
        Rent: {
            /**
             * Format: int64
             * @example 3
             */
            provider_id?: number;
            /** @example Google Play Movies */
            provider_name?: string;
            /** @example https://image.tmdb.org/t/p/w92/9cqNxx0GxF0bflZmeSMuL5tnGzr.jpg */
            logo_url?: string;
            /** @example 1 */
            display_priority?: number;
        };
        Watchlist: {
            movies?: components["schemas"]["SearchMovie"][];
            tv?: components["schemas"]["SearchTv"][];
        };
        InWatchlist: {
            /** @example true */
            in_watchlist?: boolean;
        };
        MovieWatchlistAddedSuccess: {
            /** @example movie successfully added to watchlist */
            message?: string;
        };
        MovieWatchlistRemovedSuccess: {
            /** @example movie successfully removed from watchlist */
            message?: string;
        };
        TvWatchlistAddedSuccess: {
            /** @example tv show successfully added to watchlist */
            message?: string;
        };
        TvWatchlistRemovedSuccess: {
            /** @example tv show successfully removed from watchlist */
            message?: string;
        };
        Watched: {
            movies?: components["schemas"]["SearchMoviesResponse"][];
            tv?: components["schemas"]["SearchTVResponse"][];
        };
        InWatched: {
            /** @example true */
            in_watched?: boolean;
        };
        WatchedMovieAddedSuccess: {
            /** @example movie successfully added to watched list */
            message?: string;
        };
        WatchedMovieRemovedSuccess: {
            /** @example movie successfully removed from watched list */
            message?: string;
        };
        WatchedTvAddedSuccess: {
            /** @example tv show successfully added to watched list */
            message?: string;
        };
        WatchedTvRemovedSuccess: {
            /** @example tv show successfully removed from watched list */
            message?: string;
        };
        WatchedTvSeasonAddedSuccess: {
            /** @example tv show season successfully added to watched list */
            message?: string;
        };
        WatchedTvSeasonRemovedSuccess: {
            /** @example tv show season successfully removed from watched list */
            message?: string;
        };
        WatchedTvEpisodeAddedSuccess: {
            /** @example tv show episode successfully added to watched list */
            message?: string;
        };
        WatchedTvEpisodeRemovedSuccess: {
            /** @example tv show episode successfully removed from watched list */
            message?: string;
        };
        WatchedTv: {
            /**
             * Format: int64
             * @example 1399
             */
            id?: number;
            /** @enum {string} */
            status?: WatchedTvStatus;
            seasons?: components["schemas"]["WatchedTvSeason"][];
        }[];
        WatchedTvSeason: {
            /** @example 1 */
            season_number?: number;
            /** @enum {string} */
            status?: WatchedTvStatus;
            episodes?: {
                /** @example 1 */
                episode_number?: number;
                /** @example true */
                in_watched?: boolean;
            }[];
        };
        ErrorUnauthorized: {
            /** @example you must be authenticated to access this resource */
            message?: string;
        };
        ErrorBadRequest: {
            /** @example body contains badly-formed JSON */
            message?: string;
        };
        ErrorBadRequestMissingQuery: {
            /** @example missing query parameter */
            message?: string;
        };
        ErrorBadRequestPath: {
            /** @example missing path parameter */
            message?: string;
        };
        ErrorFailedValidation: {
            /** @example must be a valid email address */
            email?: string;
        };
        ErrorInvalidCredentials: {
            /** @example invalid email or password */
            message?: string;
        };
        ErrorInternalServerError: {
            /** @example the server encountered a problem and could not process your request */
            message?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type HealthCheck = components['schemas']['HealthCheck'];
export type UserResponse = components['schemas']['UserResponse'];
export type User = components['schemas']['User'];
export type CreateUser = components['schemas']['CreateUser'];
export type AuthenticateUser = components['schemas']['AuthenticateUser'];
export type AuthenticationToken = components['schemas']['AuthenticationToken'];
export type Logout = components['schemas']['Logout'];
export type SearchMoviesResponse = components['schemas']['SearchMoviesResponse'];
export type SearchMovie = components['schemas']['SearchMovie'];
export type SearchTvResponse = components['schemas']['SearchTVResponse'];
export type SearchTv = components['schemas']['SearchTv'];
export type SearchPeopleResponse = components['schemas']['SearchPeopleResponse'];
export type SearchPeople = components['schemas']['SearchPeople'];
export type MovieDetailsResponse = components['schemas']['MovieDetailsResponse'];
export type MovieDetails = components['schemas']['MovieDetails'];
export type CastMoviesResponse = components['schemas']['CastMoviesResponse'];
export type CastMovies = components['schemas']['CastMovies'];
export type TvDetailsResponse = components['schemas']['TvDetailsResponse'];
export type TvDetails = components['schemas']['TvDetails'];
export type TvSeason = components['schemas']['TvSeason'];
export type TvSeasonDetailsResponse = components['schemas']['TvSeasonDetailsResponse'];
export type TvSeasonDetails = components['schemas']['TvSeasonDetails'];
export type TvEpisode = components['schemas']['TvEpisode'];
export type TvEpisodeDetailsResponse = components['schemas']['TvEpisodeDetailsResponse'];
export type TvEpisodeDetails = components['schemas']['TvEpisodeDetails'];
export type CastTvResponse = components['schemas']['CastTvResponse'];
export type CastTv = components['schemas']['CastTv'];
export type Role = components['schemas']['Role'];
export type PersonDetailsResponse = components['schemas']['PersonDetailsResponse'];
export type PersonDetails = components['schemas']['PersonDetails'];
export type WatchProvidersResponse = components['schemas']['WatchProvidersResponse'];
export type WatchProviders = components['schemas']['WatchProviders'];
export type Flatrate = components['schemas']['Flatrate'];
export type Buy = components['schemas']['Buy'];
export type Rent = components['schemas']['Rent'];
export type Watchlist = components['schemas']['Watchlist'];
export type InWatchlist = components['schemas']['InWatchlist'];
export type MovieWatchlistAddedSuccess = components['schemas']['MovieWatchlistAddedSuccess'];
export type MovieWatchlistRemovedSuccess = components['schemas']['MovieWatchlistRemovedSuccess'];
export type TvWatchlistAddedSuccess = components['schemas']['TvWatchlistAddedSuccess'];
export type TvWatchlistRemovedSuccess = components['schemas']['TvWatchlistRemovedSuccess'];
export type Watched = components['schemas']['Watched'];
export type InWatched = components['schemas']['InWatched'];
export type WatchedMovieAddedSuccess = components['schemas']['WatchedMovieAddedSuccess'];
export type WatchedMovieRemovedSuccess = components['schemas']['WatchedMovieRemovedSuccess'];
export type WatchedTvAddedSuccess = components['schemas']['WatchedTvAddedSuccess'];
export type WatchedTvRemovedSuccess = components['schemas']['WatchedTvRemovedSuccess'];
export type WatchedTvSeasonAddedSuccess = components['schemas']['WatchedTvSeasonAddedSuccess'];
export type WatchedTvSeasonRemovedSuccess = components['schemas']['WatchedTvSeasonRemovedSuccess'];
export type WatchedTvEpisodeAddedSuccess = components['schemas']['WatchedTvEpisodeAddedSuccess'];
export type WatchedTvEpisodeRemovedSuccess = components['schemas']['WatchedTvEpisodeRemovedSuccess'];
export type WatchedTv = components['schemas']['WatchedTv'];
export type WatchedTvSeason = components['schemas']['WatchedTvSeason'];
export type ErrorUnauthorized = components['schemas']['ErrorUnauthorized'];
export type ErrorBadRequest = components['schemas']['ErrorBadRequest'];
export type ErrorBadRequestMissingQuery = components['schemas']['ErrorBadRequestMissingQuery'];
export type ErrorBadRequestPath = components['schemas']['ErrorBadRequestPath'];
export type ErrorFailedValidation = components['schemas']['ErrorFailedValidation'];
export type ErrorInvalidCredentials = components['schemas']['ErrorInvalidCredentials'];
export type ErrorInternalServerError = components['schemas']['ErrorInternalServerError'];
export type $defs = Record<string, never>;
export interface operations {
    HealthcheckHandler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheck"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetCurrentUserHandler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    CreateUserHandler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUser"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequest"];
                };
            };
            /** @description Failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorFailedValidation"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    CreateAuthenticationTokenHandler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticateUser"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticationToken"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequest"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInvalidCredentials"];
                };
            };
            /** @description Failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorFailedValidation"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    InvalidateAuthenticationTokenHandler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Logout"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    SearchMoviesHandler: {
        parameters: {
            query: {
                /** @description The search query */
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchMoviesResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestMissingQuery"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    SearchTvHandler: {
        parameters: {
            query: {
                /** @description The search query */
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchTVResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestMissingQuery"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    SearchPeopleHandler: {
        parameters: {
            query: {
                /** @description The search query */
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchPeopleResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestMissingQuery"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    GetMovieDetailsHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The movie id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieDetailsResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    GetTvDetailsHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TvDetailsResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    GetTvSeasonDetailsHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
                /** @description The season number */
                season_number: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TvSeasonDetailsResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    GetTvEpisodeDetailsHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
                /** @description The season number */
                season_number: number;
                /** @description The episode number */
                episode_number: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TvEpisodeDetailsResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    GetPersonDetailsHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The person id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonDetailsResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    GetCastMoviesHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The movie id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CastMoviesResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    GetCastTvHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CastTvResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    GetMovieWatchProvidersHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The movie id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchProvidersResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    GetTvWatchProvidersHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchProvidersResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    GetWatchlistHandler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Watchlist"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    CheckMovieInWatchlistHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The movie id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InWatchlist"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    AddMovieToWatchlistHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The movie id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieWatchlistAddedSuccess"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    RemoveMovieFromWatchlistHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The movie id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MovieWatchlistRemovedSuccess"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    CheckTvInWatchlistHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InWatchlist"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    AddTvToWatchlistHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TvWatchlistAddedSuccess"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    RemoveTvFromWatchlistHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TvWatchlistRemovedSuccess"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    GetWatchedHandler: {
        parameters: {
            query?: {
                /** @description The type of the watched list */
                type?: PathsWatchedGetParametersQueryType;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Watched"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    CheckMovieInWatchedHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The movie id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InWatched"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    AddMovieToWatchedHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The movie id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchedMovieAddedSuccess"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    RemoveMovieFromWatchedHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The movie id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchedMovieRemovedSuccess"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    CheckTvInWatchedHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchedTv"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    AddTvToWatchedHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchedTvAddedSuccess"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    RemoveTvFromWatchedHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchedTvRemovedSuccess"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CheckTvSeasonInWatchedHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
                /** @description The season number */
                season_number: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchedTvSeason"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    AddTvSeasonToWatchedHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
                /** @description The season number */
                season_number: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchedTvSeasonAddedSuccess"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    RemoveTvSeasonFromWatchedHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
                /** @description The season number */
                season_number: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchedTvSeasonRemovedSuccess"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    CheckTvEpisodeInWatchedHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
                /** @description The season number */
                season_number: number;
                /** @description The episode number */
                episode_number: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InWatched"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    AddTvEpisodeToWatchedHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
                /** @description The season number */
                season_number: number;
                /** @description The episode number */
                episode_number: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchedTvEpisodeAddedSuccess"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
    RemoveTvEpisodeFromWatchedHandler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The TV show id */
                id: number;
                /** @description The season number */
                season_number: number;
                /** @description The episode number */
                episode_number: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchedTvEpisodeRemovedSuccess"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorBadRequestPath"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorUnauthorized"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorInternalServerError"];
                };
            };
        };
    };
}
export enum PathsWatchedGetParametersQueryType {
    movies = "movies",
    tv = "tv"
}
export enum WatchedTvStatus {
    watched = "watched",
    in_progress = "in_progress",
    not_watched = "not_watched"
}
