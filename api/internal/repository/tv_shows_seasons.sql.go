// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tv_shows_seasons.sql

package repository

import (
	"context"
)

const deleteTvShowSeason = `-- name: DeleteTvShowSeason :one
DELETE FROM tv_shows_seasons
WHERE id = $1
RETURNING id, tv_show_id, season_number, episode_count, air_date, created_at, last_fetched_at
`

func (q *Queries) DeleteTvShowSeason(ctx context.Context, id int64) (TvShowsSeason, error) {
	row := q.db.QueryRow(ctx, deleteTvShowSeason, id)
	var i TvShowsSeason
	err := row.Scan(
		&i.ID,
		&i.TvShowID,
		&i.SeasonNumber,
		&i.EpisodeCount,
		&i.AirDate,
		&i.CreatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const deleteTvShowSeasonByTvShowIdAndSeasonNumber = `-- name: DeleteTvShowSeasonByTvShowIdAndSeasonNumber :one
DELETE FROM tv_shows_seasons
WHERE tv_show_id = $1 AND season_number = $2
RETURNING id, tv_show_id, season_number, episode_count, air_date, created_at, last_fetched_at
`

type DeleteTvShowSeasonByTvShowIdAndSeasonNumberParams struct {
	TvShowID     int64 `json:"tv_show_id"`
	SeasonNumber int32 `json:"season_number"`
}

func (q *Queries) DeleteTvShowSeasonByTvShowIdAndSeasonNumber(ctx context.Context, arg DeleteTvShowSeasonByTvShowIdAndSeasonNumberParams) (TvShowsSeason, error) {
	row := q.db.QueryRow(ctx, deleteTvShowSeasonByTvShowIdAndSeasonNumber, arg.TvShowID, arg.SeasonNumber)
	var i TvShowsSeason
	err := row.Scan(
		&i.ID,
		&i.TvShowID,
		&i.SeasonNumber,
		&i.EpisodeCount,
		&i.AirDate,
		&i.CreatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const getTvShowSeason = `-- name: GetTvShowSeason :one
SELECT id, tv_show_id, season_number, episode_count, air_date, created_at, last_fetched_at FROM tv_shows_seasons WHERE id = $1
`

func (q *Queries) GetTvShowSeason(ctx context.Context, id int64) (TvShowsSeason, error) {
	row := q.db.QueryRow(ctx, getTvShowSeason, id)
	var i TvShowsSeason
	err := row.Scan(
		&i.ID,
		&i.TvShowID,
		&i.SeasonNumber,
		&i.EpisodeCount,
		&i.AirDate,
		&i.CreatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const getTvShowSeasonByTvShowIdAndSeasonNumber = `-- name: GetTvShowSeasonByTvShowIdAndSeasonNumber :one
SELECT id, tv_show_id, season_number, episode_count, air_date, created_at, last_fetched_at FROM tv_shows_seasons WHERE tv_show_id = $1 AND season_number = $2
`

type GetTvShowSeasonByTvShowIdAndSeasonNumberParams struct {
	TvShowID     int64 `json:"tv_show_id"`
	SeasonNumber int32 `json:"season_number"`
}

func (q *Queries) GetTvShowSeasonByTvShowIdAndSeasonNumber(ctx context.Context, arg GetTvShowSeasonByTvShowIdAndSeasonNumberParams) (TvShowsSeason, error) {
	row := q.db.QueryRow(ctx, getTvShowSeasonByTvShowIdAndSeasonNumber, arg.TvShowID, arg.SeasonNumber)
	var i TvShowsSeason
	err := row.Scan(
		&i.ID,
		&i.TvShowID,
		&i.SeasonNumber,
		&i.EpisodeCount,
		&i.AirDate,
		&i.CreatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const insertTvShowSeason = `-- name: InsertTvShowSeason :one
INSERT INTO tv_shows_seasons
(tv_show_id, season_number, episode_count, air_date)
VALUES($1, $2, $3, $4)
RETURNING id, tv_show_id, season_number, episode_count, air_date, created_at, last_fetched_at
`

type InsertTvShowSeasonParams struct {
	TvShowID     int64  `json:"tv_show_id"`
	SeasonNumber int32  `json:"season_number"`
	EpisodeCount int32  `json:"episode_count"`
	AirDate      string `json:"air_date"`
}

func (q *Queries) InsertTvShowSeason(ctx context.Context, arg InsertTvShowSeasonParams) (TvShowsSeason, error) {
	row := q.db.QueryRow(ctx, insertTvShowSeason,
		arg.TvShowID,
		arg.SeasonNumber,
		arg.EpisodeCount,
		arg.AirDate,
	)
	var i TvShowsSeason
	err := row.Scan(
		&i.ID,
		&i.TvShowID,
		&i.SeasonNumber,
		&i.EpisodeCount,
		&i.AirDate,
		&i.CreatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const listTvShowSeasons = `-- name: ListTvShowSeasons :many
SELECT id, tv_show_id, season_number, episode_count, air_date, created_at, last_fetched_at FROM tv_shows_seasons WHERE tv_show_id = $1 ORDER BY season_number
`

func (q *Queries) ListTvShowSeasons(ctx context.Context, tvShowID int64) ([]TvShowsSeason, error) {
	rows, err := q.db.Query(ctx, listTvShowSeasons, tvShowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TvShowsSeason
	for rows.Next() {
		var i TvShowsSeason
		if err := rows.Scan(
			&i.ID,
			&i.TvShowID,
			&i.SeasonNumber,
			&i.EpisodeCount,
			&i.AirDate,
			&i.CreatedAt,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTvShowSeasonsByTvShowTmdbId = `-- name: ListTvShowSeasonsByTvShowTmdbId :many
SELECT s.id, s.tv_show_id, s.season_number, s.episode_count, s.air_date, s.created_at, s.last_fetched_at
FROM tv_shows_seasons s
JOIN tv_shows t ON s.tv_show_id = t.id
WHERE t.tmdb_id = $1
ORDER BY s.season_number
`

func (q *Queries) ListTvShowSeasonsByTvShowTmdbId(ctx context.Context, tmdbID int32) ([]TvShowsSeason, error) {
	rows, err := q.db.Query(ctx, listTvShowSeasonsByTvShowTmdbId, tmdbID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TvShowsSeason
	for rows.Next() {
		var i TvShowsSeason
		if err := rows.Scan(
			&i.ID,
			&i.TvShowID,
			&i.SeasonNumber,
			&i.EpisodeCount,
			&i.AirDate,
			&i.CreatedAt,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTvShowSeason = `-- name: UpdateTvShowSeason :one
UPDATE tv_shows_seasons
SET season_number = $2, episode_count = $3, air_date = $4
WHERE id = $1
RETURNING id, tv_show_id, season_number, episode_count, air_date, created_at, last_fetched_at
`

type UpdateTvShowSeasonParams struct {
	ID           int64  `json:"id"`
	SeasonNumber int32  `json:"season_number"`
	EpisodeCount int32  `json:"episode_count"`
	AirDate      string `json:"air_date"`
}

func (q *Queries) UpdateTvShowSeason(ctx context.Context, arg UpdateTvShowSeasonParams) (TvShowsSeason, error) {
	row := q.db.QueryRow(ctx, updateTvShowSeason,
		arg.ID,
		arg.SeasonNumber,
		arg.EpisodeCount,
		arg.AirDate,
	)
	var i TvShowsSeason
	err := row.Scan(
		&i.ID,
		&i.TvShowID,
		&i.SeasonNumber,
		&i.EpisodeCount,
		&i.AirDate,
		&i.CreatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}
