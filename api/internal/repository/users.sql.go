// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package repository

import (
	"context"
	"time"
)

const getUser = `-- name: GetUser :one
SELECT id, created_at, name, email, password_hash, version
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Version,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, name, email, password_hash, version
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Version,
	)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT users.id, users.created_at, users.name, users.email, users.password_hash, users.version
FROM users
INNER JOIN tokens
ON users.id = tokens.user_id
WHERE tokens.hash = $1 AND tokens.expiry > $2
`

type GetUserByTokenParams struct {
	Hash   []byte    `json:"hash"`
	Expiry time.Time `json:"expiry"`
}

func (q *Queries) GetUserByToken(ctx context.Context, arg GetUserByTokenParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByToken, arg.Hash, arg.Expiry)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Version,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users
(name, email, password_hash, created_at)
VALUES ($1, $2, $3, now())
RETURNING id, created_at, name, email, password_hash, version
`

type InsertUserParams struct {
	Name         string `json:"name"`
	Email        string `json:"email"`
	PasswordHash []byte `json:"password_hash"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Name, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Version,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $1, email = $2, password_hash = $3, version = version + 1
WHERE id = $4 AND version = $5
RETURNING id, created_at, name, email, password_hash, version
`

type UpdateUserParams struct {
	Name         string `json:"name"`
	Email        string `json:"email"`
	PasswordHash []byte `json:"password_hash"`
	ID           int64  `json:"id"`
	Version      int32  `json:"version"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.ID,
		arg.Version,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Version,
	)
	return i, err
}
