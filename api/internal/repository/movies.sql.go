// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movies.sql

package repository

import (
	"context"
)

const deleteMovie = `-- name: DeleteMovie :one
DELETE FROM movies
WHERE id = $1
RETURNING id, tmdb_id, created_at, last_fetched_at, title, release_date, poster_url, overview, genres, vote_average, runtime, version
`

func (q *Queries) DeleteMovie(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRow(ctx, deleteMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.CreatedAt,
		&i.LastFetchedAt,
		&i.Title,
		&i.ReleaseDate,
		&i.PosterUrl,
		&i.Overview,
		&i.Genres,
		&i.VoteAverage,
		&i.Runtime,
		&i.Version,
	)
	return i, err
}

const getMovie = `-- name: GetMovie :one
SELECT id, tmdb_id, created_at, last_fetched_at, title, release_date, poster_url, overview, genres, vote_average, runtime, version FROM movies WHERE id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.CreatedAt,
		&i.LastFetchedAt,
		&i.Title,
		&i.ReleaseDate,
		&i.PosterUrl,
		&i.Overview,
		&i.Genres,
		&i.VoteAverage,
		&i.Runtime,
		&i.Version,
	)
	return i, err
}

const getMovieByTmdbId = `-- name: GetMovieByTmdbId :one
SELECT id, tmdb_id, created_at, last_fetched_at, title, release_date, poster_url, overview, genres, vote_average, runtime, version FROM movies WHERE tmdb_id = $1
`

func (q *Queries) GetMovieByTmdbId(ctx context.Context, tmdbID int32) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovieByTmdbId, tmdbID)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.CreatedAt,
		&i.LastFetchedAt,
		&i.Title,
		&i.ReleaseDate,
		&i.PosterUrl,
		&i.Overview,
		&i.Genres,
		&i.VoteAverage,
		&i.Runtime,
		&i.Version,
	)
	return i, err
}

const insertMovie = `-- name: InsertMovie :one
INSERT INTO movies
(tmdb_id, title, release_date, poster_url, overview, genres, vote_average, runtime)
VALUES($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, tmdb_id, created_at, last_fetched_at, title, release_date, poster_url, overview, genres, vote_average, runtime, version
`

type InsertMovieParams struct {
	TmdbID      int32    `json:"tmdb_id"`
	Title       string   `json:"title"`
	ReleaseDate string   `json:"release_date"`
	PosterUrl   string   `json:"poster_url"`
	Overview    string   `json:"overview"`
	Genres      []string `json:"genres"`
	VoteAverage float64  `json:"vote_average"`
	Runtime     int32    `json:"runtime"`
}

func (q *Queries) InsertMovie(ctx context.Context, arg InsertMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, insertMovie,
		arg.TmdbID,
		arg.Title,
		arg.ReleaseDate,
		arg.PosterUrl,
		arg.Overview,
		arg.Genres,
		arg.VoteAverage,
		arg.Runtime,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.CreatedAt,
		&i.LastFetchedAt,
		&i.Title,
		&i.ReleaseDate,
		&i.PosterUrl,
		&i.Overview,
		&i.Genres,
		&i.VoteAverage,
		&i.Runtime,
		&i.Version,
	)
	return i, err
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
SET title = $2, release_date = $3, poster_url = $4, overview = $5, genres = $6, vote_average = $7, runtime = $8, version = version + 1
WHERE id = $1 AND version = $9
RETURNING id, tmdb_id, created_at, last_fetched_at, title, release_date, poster_url, overview, genres, vote_average, runtime, version
`

type UpdateMovieParams struct {
	ID          int64    `json:"id"`
	Title       string   `json:"title"`
	ReleaseDate string   `json:"release_date"`
	PosterUrl   string   `json:"poster_url"`
	Overview    string   `json:"overview"`
	Genres      []string `json:"genres"`
	VoteAverage float64  `json:"vote_average"`
	Runtime     int32    `json:"runtime"`
	Version     int32    `json:"version"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, updateMovie,
		arg.ID,
		arg.Title,
		arg.ReleaseDate,
		arg.PosterUrl,
		arg.Overview,
		arg.Genres,
		arg.VoteAverage,
		arg.Runtime,
		arg.Version,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.CreatedAt,
		&i.LastFetchedAt,
		&i.Title,
		&i.ReleaseDate,
		&i.PosterUrl,
		&i.Overview,
		&i.Genres,
		&i.VoteAverage,
		&i.Runtime,
		&i.Version,
	)
	return i, err
}
