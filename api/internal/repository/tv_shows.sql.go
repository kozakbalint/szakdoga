// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tv_shows.sql

package repository

import (
	"context"
)

const deleteTvShow = `-- name: DeleteTvShow :one
DELETE FROM tv_shows
WHERE id = $1
RETURNING id, tmdb_id, created_at, last_fetched_at, title, release_date, poster_url, overview, genres, vote_average, version
`

func (q *Queries) DeleteTvShow(ctx context.Context, id int64) (TvShow, error) {
	row := q.db.QueryRow(ctx, deleteTvShow, id)
	var i TvShow
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.CreatedAt,
		&i.LastFetchedAt,
		&i.Title,
		&i.ReleaseDate,
		&i.PosterUrl,
		&i.Overview,
		&i.Genres,
		&i.VoteAverage,
		&i.Version,
	)
	return i, err
}

const deleteTvShowByTmdbId = `-- name: DeleteTvShowByTmdbId :one
DELETE FROM tv_shows
WHERE tmdb_id = $1
RETURNING id, tmdb_id, created_at, last_fetched_at, title, release_date, poster_url, overview, genres, vote_average, version
`

func (q *Queries) DeleteTvShowByTmdbId(ctx context.Context, tmdbID int32) (TvShow, error) {
	row := q.db.QueryRow(ctx, deleteTvShowByTmdbId, tmdbID)
	var i TvShow
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.CreatedAt,
		&i.LastFetchedAt,
		&i.Title,
		&i.ReleaseDate,
		&i.PosterUrl,
		&i.Overview,
		&i.Genres,
		&i.VoteAverage,
		&i.Version,
	)
	return i, err
}

const getTvShow = `-- name: GetTvShow :one
SELECT id, tmdb_id, created_at, last_fetched_at, title, release_date, poster_url, overview, genres, vote_average, version FROM tv_shows WHERE id = $1
`

func (q *Queries) GetTvShow(ctx context.Context, id int64) (TvShow, error) {
	row := q.db.QueryRow(ctx, getTvShow, id)
	var i TvShow
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.CreatedAt,
		&i.LastFetchedAt,
		&i.Title,
		&i.ReleaseDate,
		&i.PosterUrl,
		&i.Overview,
		&i.Genres,
		&i.VoteAverage,
		&i.Version,
	)
	return i, err
}

const getTvShowByTmdbId = `-- name: GetTvShowByTmdbId :one
SELECT id, tmdb_id, created_at, last_fetched_at, title, release_date, poster_url, overview, genres, vote_average, version FROM tv_shows WHERE tmdb_id = $1
`

func (q *Queries) GetTvShowByTmdbId(ctx context.Context, tmdbID int32) (TvShow, error) {
	row := q.db.QueryRow(ctx, getTvShowByTmdbId, tmdbID)
	var i TvShow
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.CreatedAt,
		&i.LastFetchedAt,
		&i.Title,
		&i.ReleaseDate,
		&i.PosterUrl,
		&i.Overview,
		&i.Genres,
		&i.VoteAverage,
		&i.Version,
	)
	return i, err
}

const insertTvShow = `-- name: InsertTvShow :one
INSERT INTO tv_shows
(tmdb_id, title, release_date, poster_url, overview, genres, vote_average)
VALUES($1, $2, $3, $4, $5, $6, $7)
RETURNING id, tmdb_id, created_at, last_fetched_at, title, release_date, poster_url, overview, genres, vote_average, version
`

type InsertTvShowParams struct {
	TmdbID      int32    `json:"tmdb_id"`
	Title       string   `json:"title"`
	ReleaseDate string   `json:"release_date"`
	PosterUrl   string   `json:"poster_url"`
	Overview    string   `json:"overview"`
	Genres      []string `json:"genres"`
	VoteAverage float64  `json:"vote_average"`
}

func (q *Queries) InsertTvShow(ctx context.Context, arg InsertTvShowParams) (TvShow, error) {
	row := q.db.QueryRow(ctx, insertTvShow,
		arg.TmdbID,
		arg.Title,
		arg.ReleaseDate,
		arg.PosterUrl,
		arg.Overview,
		arg.Genres,
		arg.VoteAverage,
	)
	var i TvShow
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.CreatedAt,
		&i.LastFetchedAt,
		&i.Title,
		&i.ReleaseDate,
		&i.PosterUrl,
		&i.Overview,
		&i.Genres,
		&i.VoteAverage,
		&i.Version,
	)
	return i, err
}

const listTvShows = `-- name: ListTvShows :many
SELECT id, tmdb_id, created_at, last_fetched_at, title, release_date, poster_url, overview, genres, vote_average, version FROM tv_shows ORDER BY id LIMIT $1
`

func (q *Queries) ListTvShows(ctx context.Context, limit int32) ([]TvShow, error) {
	rows, err := q.db.Query(ctx, listTvShows, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TvShow
	for rows.Next() {
		var i TvShow
		if err := rows.Scan(
			&i.ID,
			&i.TmdbID,
			&i.CreatedAt,
			&i.LastFetchedAt,
			&i.Title,
			&i.ReleaseDate,
			&i.PosterUrl,
			&i.Overview,
			&i.Genres,
			&i.VoteAverage,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWatchedTvShows = `-- name: ListWatchedTvShows :many
SELECT t.id, t.tmdb_id, t.created_at, t.last_fetched_at, t.title, t.release_date, t.poster_url, t.overview, t.genres, t.vote_average, t.version
FROM tv_shows t
JOIN watched_episodes w ON t.id = w.episode_id
WHERE w.user_id = $1
GROUP BY t.id
ORDER BY t.id
`

func (q *Queries) ListWatchedTvShows(ctx context.Context, userID int32) ([]TvShow, error) {
	rows, err := q.db.Query(ctx, listWatchedTvShows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TvShow
	for rows.Next() {
		var i TvShow
		if err := rows.Scan(
			&i.ID,
			&i.TmdbID,
			&i.CreatedAt,
			&i.LastFetchedAt,
			&i.Title,
			&i.ReleaseDate,
			&i.PosterUrl,
			&i.Overview,
			&i.Genres,
			&i.VoteAverage,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTvShow = `-- name: UpdateTvShow :one
UPDATE tv_shows
SET title = $2, release_date = $3, poster_url = $4, overview = $5, genres = $6, vote_average = $7, version = version + 1
WHERE id = $1 AND version = $8
RETURNING id, tmdb_id, created_at, last_fetched_at, title, release_date, poster_url, overview, genres, vote_average, version
`

type UpdateTvShowParams struct {
	ID          int64    `json:"id"`
	Title       string   `json:"title"`
	ReleaseDate string   `json:"release_date"`
	PosterUrl   string   `json:"poster_url"`
	Overview    string   `json:"overview"`
	Genres      []string `json:"genres"`
	VoteAverage float64  `json:"vote_average"`
	Version     int32    `json:"version"`
}

func (q *Queries) UpdateTvShow(ctx context.Context, arg UpdateTvShowParams) (TvShow, error) {
	row := q.db.QueryRow(ctx, updateTvShow,
		arg.ID,
		arg.Title,
		arg.ReleaseDate,
		arg.PosterUrl,
		arg.Overview,
		arg.Genres,
		arg.VoteAverage,
		arg.Version,
	)
	var i TvShow
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.CreatedAt,
		&i.LastFetchedAt,
		&i.Title,
		&i.ReleaseDate,
		&i.PosterUrl,
		&i.Overview,
		&i.Genres,
		&i.VoteAverage,
		&i.Version,
	)
	return i, err
}
