// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: watched_movies.sql

package repository

import (
	"context"
)

const countWatchedMovies = `-- name: CountWatchedMovies :one
SELECT COUNT(*) FROM watched_movies WHERE user_id = $1
`

func (q *Queries) CountWatchedMovies(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countWatchedMovies, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteWatchedMovie = `-- name: DeleteWatchedMovie :one
DELETE FROM watched_movies WHERE tmdb_id = $1 AND user_id = $2
RETURNING id, tmdb_id, user_id, added_at
`

type DeleteWatchedMovieParams struct {
	TmdbID int32 `json:"tmdb_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteWatchedMovie(ctx context.Context, arg DeleteWatchedMovieParams) (WatchedMovie, error) {
	row := q.db.QueryRow(ctx, deleteWatchedMovie, arg.TmdbID, arg.UserID)
	var i WatchedMovie
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.UserID,
		&i.AddedAt,
	)
	return i, err
}

const getWatchedMovie = `-- name: GetWatchedMovie :one
SELECT id, tmdb_id, user_id, added_at FROM watched_movies WHERE tmdb_id = $1 AND user_id = $2
`

type GetWatchedMovieParams struct {
	TmdbID int32 `json:"tmdb_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetWatchedMovie(ctx context.Context, arg GetWatchedMovieParams) (WatchedMovie, error) {
	row := q.db.QueryRow(ctx, getWatchedMovie, arg.TmdbID, arg.UserID)
	var i WatchedMovie
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.UserID,
		&i.AddedAt,
	)
	return i, err
}

const insertWatchedMovie = `-- name: InsertWatchedMovie :one
INSERT INTO watched_movies
(tmdb_id, user_id)
VALUES($1, $2)
RETURNING id, tmdb_id, user_id, added_at
`

type InsertWatchedMovieParams struct {
	TmdbID int32 `json:"tmdb_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) InsertWatchedMovie(ctx context.Context, arg InsertWatchedMovieParams) (WatchedMovie, error) {
	row := q.db.QueryRow(ctx, insertWatchedMovie, arg.TmdbID, arg.UserID)
	var i WatchedMovie
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.UserID,
		&i.AddedAt,
	)
	return i, err
}

const listWatchedMovies = `-- name: ListWatchedMovies :many
SELECT id, tmdb_id, user_id, added_at FROM watched_movies WHERE user_id = $1
`

func (q *Queries) ListWatchedMovies(ctx context.Context, userID int32) ([]WatchedMovie, error) {
	rows, err := q.db.Query(ctx, listWatchedMovies, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WatchedMovie
	for rows.Next() {
		var i WatchedMovie
		if err := rows.Scan(
			&i.ID,
			&i.TmdbID,
			&i.UserID,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
