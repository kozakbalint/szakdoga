// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: watchlist_movies.sql

package repository

import (
	"context"
	"time"
)

const deleteWatchlistMovie = `-- name: DeleteWatchlistMovie :one
DELETE FROM movies_watchlist WHERE id = $1
RETURNING id, user_id, movie_id, added_at, updated_at, watched
`

func (q *Queries) DeleteWatchlistMovie(ctx context.Context, id int64) (MoviesWatchlist, error) {
	row := q.db.QueryRow(ctx, deleteWatchlistMovie, id)
	var i MoviesWatchlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MovieID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.Watched,
	)
	return i, err
}

const getWatchlistMovie = `-- name: GetWatchlistMovie :one
SELECT id, user_id, movie_id, added_at, updated_at, watched FROM movies_watchlist WHERE user_id = $1 AND id = $2
`

type GetWatchlistMovieParams struct {
	UserID int32 `json:"user_id"`
	ID     int64 `json:"id"`
}

func (q *Queries) GetWatchlistMovie(ctx context.Context, arg GetWatchlistMovieParams) (MoviesWatchlist, error) {
	row := q.db.QueryRow(ctx, getWatchlistMovie, arg.UserID, arg.ID)
	var i MoviesWatchlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MovieID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.Watched,
	)
	return i, err
}

const getWatchlistMovieByMovieId = `-- name: GetWatchlistMovieByMovieId :one
SELECT id, user_id, movie_id, added_at, updated_at, watched FROM movies_watchlist WHERE user_id = $1 AND movie_id = $2
`

type GetWatchlistMovieByMovieIdParams struct {
	UserID  int32 `json:"user_id"`
	MovieID int32 `json:"movie_id"`
}

func (q *Queries) GetWatchlistMovieByMovieId(ctx context.Context, arg GetWatchlistMovieByMovieIdParams) (MoviesWatchlist, error) {
	row := q.db.QueryRow(ctx, getWatchlistMovieByMovieId, arg.UserID, arg.MovieID)
	var i MoviesWatchlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MovieID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.Watched,
	)
	return i, err
}

const insertWatchlistMovie = `-- name: InsertWatchlistMovie :one
INSERT INTO movies_watchlist
(user_id, movie_id, watched)
VALUES($1, $2, $3)
RETURNING id, user_id, movie_id, added_at, updated_at, watched
`

type InsertWatchlistMovieParams struct {
	UserID  int32 `json:"user_id"`
	MovieID int32 `json:"movie_id"`
	Watched bool  `json:"watched"`
}

func (q *Queries) InsertWatchlistMovie(ctx context.Context, arg InsertWatchlistMovieParams) (MoviesWatchlist, error) {
	row := q.db.QueryRow(ctx, insertWatchlistMovie, arg.UserID, arg.MovieID, arg.Watched)
	var i MoviesWatchlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MovieID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.Watched,
	)
	return i, err
}

const listWatchlistMovies = `-- name: ListWatchlistMovies :many
SELECT id, user_id, movie_id, added_at, updated_at, watched FROM movies_watchlist WHERE user_id = $1
`

func (q *Queries) ListWatchlistMovies(ctx context.Context, userID int32) ([]MoviesWatchlist, error) {
	rows, err := q.db.Query(ctx, listWatchlistMovies, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoviesWatchlist
	for rows.Next() {
		var i MoviesWatchlist
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MovieID,
			&i.AddedAt,
			&i.UpdatedAt,
			&i.Watched,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWatchlistMovie = `-- name: UpdateWatchlistMovie :one
UPDATE movies_watchlist
SET user_id = $1, movie_id = $2, added_at = $3, updated_at = $4, watched = $5
WHERE id = $6
RETURNING id, user_id, movie_id, added_at, updated_at, watched
`

type UpdateWatchlistMovieParams struct {
	UserID    int32     `json:"user_id"`
	MovieID   int32     `json:"movie_id"`
	AddedAt   time.Time `json:"added_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Watched   bool      `json:"watched"`
	ID        int64     `json:"id"`
}

func (q *Queries) UpdateWatchlistMovie(ctx context.Context, arg UpdateWatchlistMovieParams) (MoviesWatchlist, error) {
	row := q.db.QueryRow(ctx, updateWatchlistMovie,
		arg.UserID,
		arg.MovieID,
		arg.AddedAt,
		arg.UpdatedAt,
		arg.Watched,
		arg.ID,
	)
	var i MoviesWatchlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MovieID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.Watched,
	)
	return i, err
}
