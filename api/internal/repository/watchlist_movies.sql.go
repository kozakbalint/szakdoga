// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: watchlist_movies.sql

package repository

import (
	"context"
)

const deleteWatchlistMovie = `-- name: DeleteWatchlistMovie :one
DELETE FROM watchlist_movies WHERE tmdb_id = $1 AND user_id = $2
RETURNING id, tmdb_id, user_id, added_at
`

type DeleteWatchlistMovieParams struct {
	TmdbID int32 `json:"tmdb_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteWatchlistMovie(ctx context.Context, arg DeleteWatchlistMovieParams) (WatchlistMovie, error) {
	row := q.db.QueryRow(ctx, deleteWatchlistMovie, arg.TmdbID, arg.UserID)
	var i WatchlistMovie
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.UserID,
		&i.AddedAt,
	)
	return i, err
}

const getWatchlistMovie = `-- name: GetWatchlistMovie :one
SELECT id, tmdb_id, user_id, added_at FROM watchlist_movies WHERE tmdb_id = $1 AND user_id = $2
`

type GetWatchlistMovieParams struct {
	TmdbID int32 `json:"tmdb_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetWatchlistMovie(ctx context.Context, arg GetWatchlistMovieParams) (WatchlistMovie, error) {
	row := q.db.QueryRow(ctx, getWatchlistMovie, arg.TmdbID, arg.UserID)
	var i WatchlistMovie
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.UserID,
		&i.AddedAt,
	)
	return i, err
}

const insertWatchlistMovie = `-- name: InsertWatchlistMovie :one
INSERT INTO watchlist_movies
(tmdb_id, user_id)
VALUES($1, $2)
RETURNING id, tmdb_id, user_id, added_at
`

type InsertWatchlistMovieParams struct {
	TmdbID int32 `json:"tmdb_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) InsertWatchlistMovie(ctx context.Context, arg InsertWatchlistMovieParams) (WatchlistMovie, error) {
	row := q.db.QueryRow(ctx, insertWatchlistMovie, arg.TmdbID, arg.UserID)
	var i WatchlistMovie
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.UserID,
		&i.AddedAt,
	)
	return i, err
}

const listWatchlistMovies = `-- name: ListWatchlistMovies :many
SELECT id, tmdb_id, user_id, added_at FROM watchlist_movies WHERE user_id = $1
`

func (q *Queries) ListWatchlistMovies(ctx context.Context, userID int32) ([]WatchlistMovie, error) {
	rows, err := q.db.Query(ctx, listWatchlistMovies, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WatchlistMovie
	for rows.Next() {
		var i WatchlistMovie
		if err := rows.Scan(
			&i.ID,
			&i.TmdbID,
			&i.UserID,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
