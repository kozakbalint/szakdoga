// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: watchlist_tv_shows.sql

package repository

import (
	"context"
	"time"
)

const deleteWatchlistTvShows = `-- name: DeleteWatchlistTvShows :one
DELETE FROM watchlist_tv_shows WHERE id = $1
RETURNING id, user_id, tv_show_id, added_at
`

func (q *Queries) DeleteWatchlistTvShows(ctx context.Context, id int64) (WatchlistTvShow, error) {
	row := q.db.QueryRow(ctx, deleteWatchlistTvShows, id)
	var i WatchlistTvShow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TvShowID,
		&i.AddedAt,
	)
	return i, err
}

const getWatchlistTvShows = `-- name: GetWatchlistTvShows :one
SELECT id, user_id, tv_show_id, added_at FROM watchlist_tv_shows WHERE user_id = $1 AND id = $2
`

type GetWatchlistTvShowsParams struct {
	UserID int32 `json:"user_id"`
	ID     int64 `json:"id"`
}

func (q *Queries) GetWatchlistTvShows(ctx context.Context, arg GetWatchlistTvShowsParams) (WatchlistTvShow, error) {
	row := q.db.QueryRow(ctx, getWatchlistTvShows, arg.UserID, arg.ID)
	var i WatchlistTvShow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TvShowID,
		&i.AddedAt,
	)
	return i, err
}

const getWatchlistTvShowsByTVId = `-- name: GetWatchlistTvShowsByTVId :one
SELECT id, user_id, tv_show_id, added_at FROM watchlist_tv_shows WHERE user_id = $1 AND tv_show_id = $2
`

type GetWatchlistTvShowsByTVIdParams struct {
	UserID   int32 `json:"user_id"`
	TvShowID int32 `json:"tv_show_id"`
}

func (q *Queries) GetWatchlistTvShowsByTVId(ctx context.Context, arg GetWatchlistTvShowsByTVIdParams) (WatchlistTvShow, error) {
	row := q.db.QueryRow(ctx, getWatchlistTvShowsByTVId, arg.UserID, arg.TvShowID)
	var i WatchlistTvShow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TvShowID,
		&i.AddedAt,
	)
	return i, err
}

const insertWatchlistTvShows = `-- name: InsertWatchlistTvShows :one
INSERT INTO watchlist_tv_shows
(user_id, tv_show_id, added_at)
VALUES($1, $2, $3)
RETURNING id, user_id, tv_show_id, added_at
`

type InsertWatchlistTvShowsParams struct {
	UserID   int32     `json:"user_id"`
	TvShowID int32     `json:"tv_show_id"`
	AddedAt  time.Time `json:"added_at"`
}

func (q *Queries) InsertWatchlistTvShows(ctx context.Context, arg InsertWatchlistTvShowsParams) (WatchlistTvShow, error) {
	row := q.db.QueryRow(ctx, insertWatchlistTvShows, arg.UserID, arg.TvShowID, arg.AddedAt)
	var i WatchlistTvShow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TvShowID,
		&i.AddedAt,
	)
	return i, err
}

const listWatchlistTvShows = `-- name: ListWatchlistTvShows :many
SELECT id, user_id, tv_show_id, added_at FROM watchlist_tv_shows WHERE user_id = $1
`

func (q *Queries) ListWatchlistTvShows(ctx context.Context, userID int32) ([]WatchlistTvShow, error) {
	rows, err := q.db.Query(ctx, listWatchlistTvShows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WatchlistTvShow
	for rows.Next() {
		var i WatchlistTvShow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TvShowID,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWatchlistTvShows = `-- name: UpdateWatchlistTvShows :one
UPDATE watchlist_tv_shows
SET user_id = $1, tv_show_id = $2, added_at = $3
WHERE id = $4
RETURNING id, user_id, tv_show_id, added_at
`

type UpdateWatchlistTvShowsParams struct {
	UserID   int32     `json:"user_id"`
	TvShowID int32     `json:"tv_show_id"`
	AddedAt  time.Time `json:"added_at"`
	ID       int64     `json:"id"`
}

func (q *Queries) UpdateWatchlistTvShows(ctx context.Context, arg UpdateWatchlistTvShowsParams) (WatchlistTvShow, error) {
	row := q.db.QueryRow(ctx, updateWatchlistTvShows,
		arg.UserID,
		arg.TvShowID,
		arg.AddedAt,
		arg.ID,
	)
	var i WatchlistTvShow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TvShowID,
		&i.AddedAt,
	)
	return i, err
}
