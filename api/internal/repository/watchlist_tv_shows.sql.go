// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: watchlist_tv_shows.sql

package repository

import (
	"context"
)

const countWatchlistTvShows = `-- name: CountWatchlistTvShows :one
SELECT COUNT(*) FROM watchlist_tv WHERE user_id = $1
`

func (q *Queries) CountWatchlistTvShows(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countWatchlistTvShows, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteWatchlistTvShow = `-- name: DeleteWatchlistTvShow :one
DELETE FROM watchlist_tv WHERE tmdb_id = $1 AND user_id = $2
RETURNING id, tmdb_id, user_id, added_at
`

type DeleteWatchlistTvShowParams struct {
	TmdbID int32 `json:"tmdb_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteWatchlistTvShow(ctx context.Context, arg DeleteWatchlistTvShowParams) (WatchlistTv, error) {
	row := q.db.QueryRow(ctx, deleteWatchlistTvShow, arg.TmdbID, arg.UserID)
	var i WatchlistTv
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.UserID,
		&i.AddedAt,
	)
	return i, err
}

const getWatchlistTvShow = `-- name: GetWatchlistTvShow :one
SELECT id, tmdb_id, user_id, added_at FROM watchlist_tv WHERE tmdb_id = $1 AND user_id = $2
`

type GetWatchlistTvShowParams struct {
	TmdbID int32 `json:"tmdb_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetWatchlistTvShow(ctx context.Context, arg GetWatchlistTvShowParams) (WatchlistTv, error) {
	row := q.db.QueryRow(ctx, getWatchlistTvShow, arg.TmdbID, arg.UserID)
	var i WatchlistTv
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.UserID,
		&i.AddedAt,
	)
	return i, err
}

const insertWatchlistTvShow = `-- name: InsertWatchlistTvShow :one
INSERT INTO watchlist_tv
(tmdb_id, user_id)
VALUES($1, $2)
RETURNING id, tmdb_id, user_id, added_at
`

type InsertWatchlistTvShowParams struct {
	TmdbID int32 `json:"tmdb_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) InsertWatchlistTvShow(ctx context.Context, arg InsertWatchlistTvShowParams) (WatchlistTv, error) {
	row := q.db.QueryRow(ctx, insertWatchlistTvShow, arg.TmdbID, arg.UserID)
	var i WatchlistTv
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.UserID,
		&i.AddedAt,
	)
	return i, err
}

const listWatchlistTvShows = `-- name: ListWatchlistTvShows :many
SELECT id, tmdb_id, user_id, added_at FROM watchlist_tv WHERE user_id = $1
`

func (q *Queries) ListWatchlistTvShows(ctx context.Context, userID int32) ([]WatchlistTv, error) {
	rows, err := q.db.Query(ctx, listWatchlistTvShows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WatchlistTv
	for rows.Next() {
		var i WatchlistTv
		if err := rows.Scan(
			&i.ID,
			&i.TmdbID,
			&i.UserID,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
