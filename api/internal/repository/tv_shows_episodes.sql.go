// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tv_shows_episodes.sql

package repository

import (
	"context"
)

const deleteTvShowEpisode = `-- name: DeleteTvShowEpisode :one
DELETE FROM tv_shows_episodes
WHERE id = $1
RETURNING id, tv_show_id, season_id, episode_number, title, overview, air_date, created_at, last_fetched_at
`

func (q *Queries) DeleteTvShowEpisode(ctx context.Context, id int64) (TvShowsEpisode, error) {
	row := q.db.QueryRow(ctx, deleteTvShowEpisode, id)
	var i TvShowsEpisode
	err := row.Scan(
		&i.ID,
		&i.TvShowID,
		&i.SeasonID,
		&i.EpisodeNumber,
		&i.Title,
		&i.Overview,
		&i.AirDate,
		&i.CreatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const deleteTvShowEpisodeByTvShowIdAndSeasonNumberAndEpisodeNumber = `-- name: DeleteTvShowEpisodeByTvShowIdAndSeasonNumberAndEpisodeNumber :one
DELETE FROM tv_shows_episodes
WHERE tv_show_id = $1 AND season_id = $2 AND episode_number = $3
RETURNING id, tv_show_id, season_id, episode_number, title, overview, air_date, created_at, last_fetched_at
`

type DeleteTvShowEpisodeByTvShowIdAndSeasonNumberAndEpisodeNumberParams struct {
	TvShowID      int64 `json:"tv_show_id"`
	SeasonID      int64 `json:"season_id"`
	EpisodeNumber int32 `json:"episode_number"`
}

func (q *Queries) DeleteTvShowEpisodeByTvShowIdAndSeasonNumberAndEpisodeNumber(ctx context.Context, arg DeleteTvShowEpisodeByTvShowIdAndSeasonNumberAndEpisodeNumberParams) (TvShowsEpisode, error) {
	row := q.db.QueryRow(ctx, deleteTvShowEpisodeByTvShowIdAndSeasonNumberAndEpisodeNumber, arg.TvShowID, arg.SeasonID, arg.EpisodeNumber)
	var i TvShowsEpisode
	err := row.Scan(
		&i.ID,
		&i.TvShowID,
		&i.SeasonID,
		&i.EpisodeNumber,
		&i.Title,
		&i.Overview,
		&i.AirDate,
		&i.CreatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const deleteTvShowEpisodesByTvShowId = `-- name: DeleteTvShowEpisodesByTvShowId :many
DELETE FROM tv_shows_episodes
WHERE tv_show_id = $1
RETURNING id, tv_show_id, season_id, episode_number, title, overview, air_date, created_at, last_fetched_at
`

func (q *Queries) DeleteTvShowEpisodesByTvShowId(ctx context.Context, tvShowID int64) ([]TvShowsEpisode, error) {
	rows, err := q.db.Query(ctx, deleteTvShowEpisodesByTvShowId, tvShowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TvShowsEpisode
	for rows.Next() {
		var i TvShowsEpisode
		if err := rows.Scan(
			&i.ID,
			&i.TvShowID,
			&i.SeasonID,
			&i.EpisodeNumber,
			&i.Title,
			&i.Overview,
			&i.AirDate,
			&i.CreatedAt,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteTvShowEpisodesByTvShowTmdbId = `-- name: DeleteTvShowEpisodesByTvShowTmdbId :many
DELETE FROM tv_shows_episodes
WHERE tv_show_id IN (SELECT id FROM tv_shows WHERE tmdb_id = $1)
RETURNING id, tv_show_id, season_id, episode_number, title, overview, air_date, created_at, last_fetched_at
`

func (q *Queries) DeleteTvShowEpisodesByTvShowTmdbId(ctx context.Context, tmdbID int32) ([]TvShowsEpisode, error) {
	rows, err := q.db.Query(ctx, deleteTvShowEpisodesByTvShowTmdbId, tmdbID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TvShowsEpisode
	for rows.Next() {
		var i TvShowsEpisode
		if err := rows.Scan(
			&i.ID,
			&i.TvShowID,
			&i.SeasonID,
			&i.EpisodeNumber,
			&i.Title,
			&i.Overview,
			&i.AirDate,
			&i.CreatedAt,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTvShowEpisode = `-- name: GetTvShowEpisode :one
SELECT id, tv_show_id, season_id, episode_number, title, overview, air_date, created_at, last_fetched_at FROM tv_shows_episodes WHERE id = $1
`

func (q *Queries) GetTvShowEpisode(ctx context.Context, id int64) (TvShowsEpisode, error) {
	row := q.db.QueryRow(ctx, getTvShowEpisode, id)
	var i TvShowsEpisode
	err := row.Scan(
		&i.ID,
		&i.TvShowID,
		&i.SeasonID,
		&i.EpisodeNumber,
		&i.Title,
		&i.Overview,
		&i.AirDate,
		&i.CreatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const getTvShowEpisodeByTvShowIdAndSeasonNumberAndEpisodeNumber = `-- name: GetTvShowEpisodeByTvShowIdAndSeasonNumberAndEpisodeNumber :one
SELECT id, tv_show_id, season_id, episode_number, title, overview, air_date, created_at, last_fetched_at FROM tv_shows_episodes WHERE tv_show_id = $1 AND season_id = $2 AND episode_number = $3
`

type GetTvShowEpisodeByTvShowIdAndSeasonNumberAndEpisodeNumberParams struct {
	TvShowID      int64 `json:"tv_show_id"`
	SeasonID      int64 `json:"season_id"`
	EpisodeNumber int32 `json:"episode_number"`
}

func (q *Queries) GetTvShowEpisodeByTvShowIdAndSeasonNumberAndEpisodeNumber(ctx context.Context, arg GetTvShowEpisodeByTvShowIdAndSeasonNumberAndEpisodeNumberParams) (TvShowsEpisode, error) {
	row := q.db.QueryRow(ctx, getTvShowEpisodeByTvShowIdAndSeasonNumberAndEpisodeNumber, arg.TvShowID, arg.SeasonID, arg.EpisodeNumber)
	var i TvShowsEpisode
	err := row.Scan(
		&i.ID,
		&i.TvShowID,
		&i.SeasonID,
		&i.EpisodeNumber,
		&i.Title,
		&i.Overview,
		&i.AirDate,
		&i.CreatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const insertTvShowEpisode = `-- name: InsertTvShowEpisode :one
INSERT INTO tv_shows_episodes
(tv_show_id, season_id, episode_number, title, overview, air_date)
VALUES($1, $2, $3, $4, $5, $6)
RETURNING id, tv_show_id, season_id, episode_number, title, overview, air_date, created_at, last_fetched_at
`

type InsertTvShowEpisodeParams struct {
	TvShowID      int64  `json:"tv_show_id"`
	SeasonID      int64  `json:"season_id"`
	EpisodeNumber int32  `json:"episode_number"`
	Title         string `json:"title"`
	Overview      string `json:"overview"`
	AirDate       string `json:"air_date"`
}

func (q *Queries) InsertTvShowEpisode(ctx context.Context, arg InsertTvShowEpisodeParams) (TvShowsEpisode, error) {
	row := q.db.QueryRow(ctx, insertTvShowEpisode,
		arg.TvShowID,
		arg.SeasonID,
		arg.EpisodeNumber,
		arg.Title,
		arg.Overview,
		arg.AirDate,
	)
	var i TvShowsEpisode
	err := row.Scan(
		&i.ID,
		&i.TvShowID,
		&i.SeasonID,
		&i.EpisodeNumber,
		&i.Title,
		&i.Overview,
		&i.AirDate,
		&i.CreatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const listTvShowEpisodes = `-- name: ListTvShowEpisodes :many
SELECT id, tv_show_id, season_id, episode_number, title, overview, air_date, created_at, last_fetched_at FROM tv_shows_episodes WHERE tv_show_id = $1 AND season_id = $2 ORDER BY episode_number
`

type ListTvShowEpisodesParams struct {
	TvShowID int64 `json:"tv_show_id"`
	SeasonID int64 `json:"season_id"`
}

func (q *Queries) ListTvShowEpisodes(ctx context.Context, arg ListTvShowEpisodesParams) ([]TvShowsEpisode, error) {
	rows, err := q.db.Query(ctx, listTvShowEpisodes, arg.TvShowID, arg.SeasonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TvShowsEpisode
	for rows.Next() {
		var i TvShowsEpisode
		if err := rows.Scan(
			&i.ID,
			&i.TvShowID,
			&i.SeasonID,
			&i.EpisodeNumber,
			&i.Title,
			&i.Overview,
			&i.AirDate,
			&i.CreatedAt,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTvShowEpisodesByTvShowTmdbIdAndSeasonNumber = `-- name: ListTvShowEpisodesByTvShowTmdbIdAndSeasonNumber :many
SELECT e.id, e.tv_show_id, e.season_id, e.episode_number, e.title, e.overview, e.air_date, e.created_at, e.last_fetched_at
FROM tv_shows_episodes e
JOIN tv_shows_seasons s ON e.season_id = s.id
JOIN tv_shows t ON s.tv_show_id = t.id
WHERE t.tmdb_id = $1 AND s.season_number = $2
ORDER BY e.episode_number
`

type ListTvShowEpisodesByTvShowTmdbIdAndSeasonNumberParams struct {
	TmdbID       int32 `json:"tmdb_id"`
	SeasonNumber int32 `json:"season_number"`
}

func (q *Queries) ListTvShowEpisodesByTvShowTmdbIdAndSeasonNumber(ctx context.Context, arg ListTvShowEpisodesByTvShowTmdbIdAndSeasonNumberParams) ([]TvShowsEpisode, error) {
	rows, err := q.db.Query(ctx, listTvShowEpisodesByTvShowTmdbIdAndSeasonNumber, arg.TmdbID, arg.SeasonNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TvShowsEpisode
	for rows.Next() {
		var i TvShowsEpisode
		if err := rows.Scan(
			&i.ID,
			&i.TvShowID,
			&i.SeasonID,
			&i.EpisodeNumber,
			&i.Title,
			&i.Overview,
			&i.AirDate,
			&i.CreatedAt,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTvShowEpisode = `-- name: UpdateTvShowEpisode :one
UPDATE tv_shows_episodes
SET episode_number = $2, title = $3, overview = $4, air_date = $5
WHERE id = $1
RETURNING id, tv_show_id, season_id, episode_number, title, overview, air_date, created_at, last_fetched_at
`

type UpdateTvShowEpisodeParams struct {
	ID            int64  `json:"id"`
	EpisodeNumber int32  `json:"episode_number"`
	Title         string `json:"title"`
	Overview      string `json:"overview"`
	AirDate       string `json:"air_date"`
}

func (q *Queries) UpdateTvShowEpisode(ctx context.Context, arg UpdateTvShowEpisodeParams) (TvShowsEpisode, error) {
	row := q.db.QueryRow(ctx, updateTvShowEpisode,
		arg.ID,
		arg.EpisodeNumber,
		arg.Title,
		arg.Overview,
		arg.AirDate,
	)
	var i TvShowsEpisode
	err := row.Scan(
		&i.ID,
		&i.TvShowID,
		&i.SeasonID,
		&i.EpisodeNumber,
		&i.Title,
		&i.Overview,
		&i.AirDate,
		&i.CreatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}
